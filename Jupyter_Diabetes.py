#!/usr/bin/env python
# coding: utf-8

# In[14]:


# -*- coding: utf-8 -*-
"""daibetes_nttr.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1fOMEgiPvBSiBlhefMhlJ13-U8zDUMju8

"""


# In[15]:


#importing libraries

import streamlit as st
import pandas as pd
from sklearn.metrics import accuracy_score
from sklearn.model_selection import train_test_split
import numpy as np


# In[16]:


#Reading the csv dataset

df = pd.read_csv('./diabetes.csv')
#df = pd.read_csv('diabetes.csv')

print(df.shape)
df.head(5)


# In[17]:


import seaborn as sns
import matplotlib.pyplot as plt
#get correlations of each features in dataset
corrmat = df.corr()
top_corr_features = corrmat.index
plt.figure(figsize=(20,20))
#plot heat map
g=sns.heatmap(df[top_corr_features].corr(),annot=True,cmap="RdYlGn")


# In[18]:


plt.figure(figsize=(13,5))
sns.boxplot(data=df, )
#plt.show



df.info()


# In[19]:


df.isnull().sum()


# In[20]:


diabetes_true_count = len(df.loc[df['Outcome'] == True])
diabetes_false_count = len(df.loc[df['Outcome'] == False])
(diabetes_true_count,diabetes_false_count)


# In[21]:


print("total number of rows : {0}".format(len(df)))
print("number of rows missing glucose_conc: {0}".format(len(df.loc[df['Glucose'] == 0])))
print("number of rows missing glucose_conc: {0}".format(len(df.loc[df['Glucose'] == 0])))
print("number of rows missing diastolic_bp: {0}".format(len(df.loc[df['BloodPressure'] == 0])))
print("number of rows missing insulin: {0}".format(len(df.loc[df['Insulin'] == 0])))
print("number of rows missing bmi: {0}".format(len(df.loc[df['BMI'] == 0])))
print("number of rows missing diab_pred: {0}".format(len(df.loc[df['DiabetesPedigreeFunction'] == 0])))
print("number of rows missing age: {0}".format(len(df.loc[df['Age'] == 0])))
print("number of rows missing skin: {0}".format(len(df.loc[df['SkinThickness'] == 0])))


# In[22]:


#Storing independent and dependent variables

x = df.drop(['Outcome'], axis = 1)
y = df.iloc[:,-1]

x.replace(to_replace = 0, value = df.mean(), inplace = True)

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.2, random_state = 0)


# In[23]:


from sklearn.impute import SimpleImputer as Imputer

fill_values = Imputer(missing_values=0, strategy="mean")

x_train = fill_values.fit_transform(x_train)
x_test = fill_values.fit_transform(x_test)


# In[24]:



st.title('Integrated Healthcare System(HS202 Project)')  
st.subheader('Diabetic Status Predictor')
st.subheader('Group-11')
st.subheader('Training Data')
st.write(df.describe())

st.subheader('Visualiztion')
st.bar_chart(df)


# In[ ]:





# In[25]:


#Creating a function to Storing and Display of User data

def user_report():
  pregnancies = st.sidebar.slider('Pregnancies', 0, 17, 3)
  glucose = st.sidebar.slider('Glucose', 0, 200, 120)
  bp = st.sidebar.slider('Blood Pressure', 0, 122, 70)
  skinthickness = st.sidebar.slider('Skin Thickness', 0, 100, 20)
  Insulin = st.sidebar.slider('Insulin', 0, 846, 79)
  bmi = st.sidebar.slider('BMI', 0, 67, 20)
  dpf = st.sidebar.slider('Diabetes Pedigree Function', 0.0, 2.4, 0.47)
  age = st.sidebar.slider('Age', 21, 88, 33)

  user_report = {
      'pregnancies':pregnancies,
      'glucose':glucose,
      'bp':bp,
      'skinthickness':skinthickness,
      'Insulin':Insulin,
      'bmi':bmi,
      'dpf':dpf,
      'age':age
  }
  report_data = pd.DataFrame(user_report, index=[0])
  return report_data

user_data = user_report()


# In[26]:


#From Sklearn library Using Random Forest 

from sklearn.ensemble import RandomForestClassifier
rf = RandomForestClassifier()
rf.fit(x_train, y_train)

st.subheader('Accuracy using Random Forest: ')
st.write(str(accuracy_score(y_test, rf.predict(x_test))*100)+'%')
user_result = rf.predict(user_data)
st.subheader('Your Report according to Random forest Algorithm: ')
ouput1 = ''
if user_result[0] ==0:
  output1 = 'You are healthy according to Random forest Algorithm'
else:
  output1 = 'You are not healthy according to Random forest Algorithm'

st.write(output1)
 


# In[27]:


from sklearn.metrics import confusion_matrix  
cm= confusion_matrix(y_test, rf.predict(x_test)) 
import seaborn as sns
sns.heatmap(cm, annot = True, cmap = "Blues", fmt = "d", cbar = True)


# In[28]:


#From Sklearn library Using KNeighborsClassifier  

from sklearn.neighbors import KNeighborsClassifier  
classifier= KNeighborsClassifier(n_neighbors=5, metric='minkowski', p=2 )  
classifier.fit(x_train, y_train)

user_result1 = classifier.predict(user_data)

st.subheader('Accuracy using KNeighborsClassifier: ')
st.write(str(accuracy_score(y_test, classifier.predict(x_test))*100)+'%')


st.subheader('Your Report according to KNeighborsClassifier: ')
ouput2 = ''
if user_result1[0] ==0:
  output2 = 'You are healthy according to KNeighborsClassifier'
else:
  output2 = 'You are not healthy according to KNeighborsClassifier'

st.write(output2)


# In[29]:


cm1= confusion_matrix(y_test, classifier.predict(x_test)) 
import seaborn as sns
sns.heatmap(cm1, annot = True, cmap = "Blues", fmt = "d", cbar = True)


# In[30]:


#From Sklearn library Using Support vector classifier  

from sklearn.svm import SVC 
classifier2 = SVC(kernel='linear', random_state=0)  
classifier2.fit(x_train, y_train) 

user_result2 = classifier2.predict(user_data)

st.subheader('Accuracy using SVC: ')
st.write(str(accuracy_score(y_test, classifier2.predict(x_test))*100)+'%')

st.subheader('Your Report according to SVC: ')
ouput3 = ''
if user_result2[0] ==0:
  output3 = 'You are healthy according to SVC'
else:
  output3 = 'You are not healthy according to SVC'

st.write(output3)


# In[31]:


cm2= confusion_matrix(y_test, classifier2.predict(x_test)) 
import seaborn as sns
sns.heatmap(cm2, annot = True, cmap = "Blues", fmt = "d", cbar = True)


# In[32]:


#From Sklearn library Using Support vector classifier  

from sklearn.linear_model import LogisticRegression # "Support vector classifier"  
logReg = LogisticRegression()
logReg.fit(x_train, y_train) 

user_result3 = logReg.predict(user_data)

st.subheader('Accuracy using Logistic Regression: ')
st.write(str(accuracy_score(y_test, logReg.predict(x_test))*100)+'%')

st.subheader('Your Report according to Logistic Regression: ')
ouput4 = ''
if user_result3[0] ==0:
  output4 = 'You are healthy according to Logistic Regression'
else:
  output4 = 'You are not healthy according to Logistic Regression'

st.write(output4)



# In[33]:


cm3= confusion_matrix(y_test, logReg.predict(x_test)) 
import seaborn as sns
sns.heatmap(cm3, annot = True, cmap = "Blues", fmt = "d", cbar = True)

